2020-02-12 12:25:23 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0' at line 37 [[^^]] [] [[^^]] []
2020-02-12 12:25:23 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'N'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_credit","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:25:23 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0' at line 37 [[^^]] [] [[^^]] []
2020-02-12 12:25:23 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:42:17 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0' at line 37 [[^^]] [] [[^^]] []
2020-02-12 12:42:17 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'N'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_credit","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:42:18 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0' at line 37 [[^^]] [] [[^^]] []
2020-02-12 12:42:18 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CONVERT(BIGINT, ST1.stock_unit_price) * CONVERT(BIGINT, ST1.stock_amount) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:43:46 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'T1.stock_unit_price' in 'field list' [[^^]] [] [[^^]] []
2020-02-12 12:43:46 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN ST1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN T1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'N'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_credit","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:43:46 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'T1.stock_unit_price' in 'field list' [[^^]] [] [[^^]] []
2020-02-12 12:43:46 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN ST1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN T1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:44:28 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'T1.stock_unit_price' in 'field list' [[^^]] [] [[^^]] []
2020-02-12 12:44:28 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN ST1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN T1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'N'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_credit","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 12:44:28 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'T1.stock_unit_price' in 'field list' [[^^]] [] [[^^]] []
2020-02-12 12:44:28 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN ST1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN T1.stock_unit_price * ST1.stock_amount ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 13:11:41 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'BIGINT) * CAST(ST1.stock_amount AS BIGINT) ELSE 0 END), 0) as prev_stock_amount ' at line 37 [[^^]] [] [[^^]] []
2020-02-12 13:11:41 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS BIGINT) * CAST(ST1.stock_amount AS BIGINT) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS BIGINT) * CAST(ST1.stock_amount AS BIGINT) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'N'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_credit","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 13:11:41 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'BIGINT) * CAST(ST1.stock_amount AS BIGINT) ELSE 0 END), 0) as prev_stock_amount ' at line 37 [[^^]] [] [[^^]] []
2020-02-12 13:11:41 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS BIGINT) * CAST(ST1.stock_amount AS BIGINT) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS BIGINT) * CAST(ST1.stock_amount AS BIGINT) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 13:24:07 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SIGEND INTEGER) * CAST(ST1.stock_amount AS SIGEND INTEGER) ELSE 0 END), 0) as pr' at line 37 [[^^]] [] [[^^]] []
2020-02-12 13:24:07 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS SIGEND INTEGER) * CAST(ST1.stock_amount AS SIGEND INTEGER) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS SIGEND INTEGER) * CAST(ST1.stock_amount AS SIGEND INTEGER) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'N'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_credit","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 13:24:07 [[^^]] ERROR [[^^]] Error message(1064): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SIGEND INTEGER) * CAST(ST1.stock_amount AS SIGEND INTEGER) ELSE 0 END), 0) as pr' at line 37 [[^^]] [] [[^^]] []
2020-02-12 13:24:07 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-02-12', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-02-12' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-02-12', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-02-12', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-02-12' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS SIGEND INTEGER) * CAST(ST1.stock_amount AS SIGEND INTEGER) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-02-12', DATE) THEN CAST(ST1.stock_unit_price AS SIGEND INTEGER) * CAST(ST1.stock_amount AS SIGEND INTEGER) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-02-12', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1   And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","date":"2020-02-12","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 18:02:32 [[^^]] ERROR [[^^]] Error message(1222): The used SELECT statements have a different number of columns [[^^]] [] [[^^]] []
2020-02-12 18:02:32 [[^^]] ERROR [[^^]] execSqlOneCol => SELECT COUNT(T.settle_idx) FROM   								DY_SETTLE T 								Left Outer Join DY_ORDER O On T.order_idx = O.order_idx 								Left Outer Join DY_SELLER S On T.seller_idx = S.seller_idx 								Left Outer Join DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = T.supplier_idx  where   								T.settle_is_del = N'N' 								 And 	  			( 				settle_date >= '2020-02-12'  				And settle_date <= '2020-02-12' 			)  			UNION ALL 			Select           T.*  , S.seller_name, SUPPLIER.supplier_name 							, O.order_name, O.order_tp_num, O.order_hp_num 							, O.receive_name, O.receive_tp_num, O.receive_hp_num 							, IFNULL(O.receive_addr1, '') as receive_addr1 							, IFNULL(O.receive_addr2, '') as receive_addr2 							, IFNULL(O.receive_zipcode, '') as receive_zipcode 							, O.receive_memo, O.order_progress_step_accept_temp_date 							, Case When T.order_cs_status = 'ORDER_CANCEL' Then 								(Select code_name From DY_CODE C_I Where C_I.parent_code = N'CS_REASON_CANCEL' And C_I.code = T.cs_reason_cancel) 							End as cs_reason_cancel_text  							, CASE WHEN T.settle_date != DATE_FORMAT(T.settle_regdate,'%Y-%m-%d') 		                               Then T.settle_date                                        ELSE T.settle_regdate End AS search_date   					,ROW_NUMBER() OVER ( 						ORDER BY  CASE WHEN T.settle_date != DATE_FORMAT(T.settle_regdate,'%Y-%m-%d') THEN DATE_FORMAT(T.settle_date,'%Y-%m-%d %23:%59:%998') ELSE DATE_FORMAT(T.settle_regdate,'%Y-%m-%d %H:%i:%s') END asc 			        ) AS rowNum 		        From   								DY_SETTLE_UPLOAD T 								Left Outer Join DY_ORDER O On T.order_idx = O.order_idx 								Left Outer Join DY_SELLER S On T.seller_idx = S.seller_idx 								Left Outer Join DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = T.supplier_idx  		        where   								T.settle_is_del = N'N' 								 And 	  			( 				settle_date >= '2019-12-02'  				And settle_date <= '2019-12-02' 			)         		  [[^^]] {"path":"/settle/transaction_list_grid.php","querystring":"param=period_type%3Dsettle_date%26date_start%3D2020-02-12%26date_end%3D2020-02-12%26product_category_l_idx%3D0%26product_category_m_idx%3D%26product_tax_type%3D%26product_seller_group_idx%3D0%26product_supplier_group_idx%3D0%26search_column%3DT.product_name%26search_keyword%3D&_search=false&nd=1581498151972&rows=300&page=1&sidx=search_date&sord=asc","postdata":[],"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 18:02:39 [[^^]] ERROR [[^^]] Error message(1222): The used SELECT statements have a different number of columns [[^^]] [] [[^^]] []
2020-02-12 18:02:39 [[^^]] ERROR [[^^]] execSqlOneCol => SELECT COUNT(T.settle_idx) FROM   								DY_SETTLE T 								Left Outer Join DY_ORDER O On T.order_idx = O.order_idx 								Left Outer Join DY_SELLER S On T.seller_idx = S.seller_idx 								Left Outer Join DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = T.supplier_idx  where   								T.settle_is_del = N'N' 								 And 	  			( 				settle_date >= '2020-02-12'  				And settle_date <= '2020-02-12' 			)  			UNION ALL 			Select           T.*  , S.seller_name, SUPPLIER.supplier_name 							, O.order_name, O.order_tp_num, O.order_hp_num 							, O.receive_name, O.receive_tp_num, O.receive_hp_num 							, IFNULL(O.receive_addr1, '') as receive_addr1 							, IFNULL(O.receive_addr2, '') as receive_addr2 							, IFNULL(O.receive_zipcode, '') as receive_zipcode 							, O.receive_memo, O.order_progress_step_accept_temp_date 							, Case When T.order_cs_status = 'ORDER_CANCEL' Then 								(Select code_name From DY_CODE C_I Where C_I.parent_code = N'CS_REASON_CANCEL' And C_I.code = T.cs_reason_cancel) 							End as cs_reason_cancel_text  							, CASE WHEN T.settle_date != DATE_FORMAT(T.settle_regdate,'%Y-%m-%d') 		                               Then T.settle_date                                        ELSE T.settle_regdate End AS search_date   					,ROW_NUMBER() OVER ( 						ORDER BY  CASE WHEN T.settle_date != DATE_FORMAT(T.settle_regdate,'%Y-%m-%d') THEN DATE_FORMAT(T.settle_date,'%Y-%m-%d %23:%59:%998') ELSE DATE_FORMAT(T.settle_regdate,'%Y-%m-%d %H:%i:%s') END asc 			        ) AS rowNum 		        From   								DY_SETTLE_UPLOAD T 								Left Outer Join DY_ORDER O On T.order_idx = O.order_idx 								Left Outer Join DY_SELLER S On T.seller_idx = S.seller_idx 								Left Outer Join DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = T.supplier_idx  		        where   								T.settle_is_del = N'N' 								 And 	  			( 				settle_date >= '2019-12-02'  				And settle_date <= '2019-12-02' 			)         		  [[^^]] {"path":"/settle/transaction_list_grid.php","querystring":"param=period_type%3Dsettle_date%26date_start%3D2020-02-12%26date_end%3D2020-02-12%26product_category_l_idx%3D0%26product_category_m_idx%3D%26product_tax_type%3D%26product_seller_group_idx%3D0%26seller_idx%3D%26product_supplier_group_idx%3D0%26supplier_idx%3D%26search_column%3DT.product_name%26search_keyword%3D&_search=false&nd=1581498159322&rows=300&page=1&sidx=search_date&sord=asc","postdata":[],"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-02-12 18:09:01 [[^^]] ERROR [[^^]] Error message(1222): The used SELECT statements have a different number of columns [[^^]] [] [[^^]] []
2020-02-12 18:09:01 [[^^]] ERROR [[^^]] execSqlOneCol => SELECT COUNT(T.settle_idx) FROM   								DY_SETTLE T 								Left Outer Join DY_ORDER O On T.order_idx = O.order_idx 								Left Outer Join DY_SELLER S On T.seller_idx = S.seller_idx 								Left Outer Join DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = T.supplier_idx  where   								T.settle_is_del = N'N' 								 And 	  			( 				settle_date >= '2020-02-12'  				And settle_date <= '2020-02-12' 			)  		 			UNION ALL 			Select           T.*  , S.seller_name, SUPPLIER.supplier_name 							, O.order_name, O.order_tp_num, O.order_hp_num 							, O.receive_name, O.receive_tp_num, O.receive_hp_num 							, IFNULL(O.receive_addr1, '') as receive_addr1 							, IFNULL(O.receive_addr2, '') as receive_addr2 							, IFNULL(O.receive_zipcode, '') as receive_zipcode 							, O.receive_memo, O.order_progress_step_accept_temp_date 							, Case When T.order_cs_status = 'ORDER_CANCEL' Then 								(Select code_name From DY_CODE C_I Where C_I.parent_code = N'CS_REASON_CANCEL' And C_I.code = T.cs_reason_cancel) 							End as cs_reason_cancel_text  							, CASE WHEN T.settle_date != DATE_FORMAT(T.settle_regdate,'%Y-%m-%d') 		                               Then T.settle_date                                        ELSE T.settle_regdate End AS search_date   					,ROW_NUMBER() OVER ( 						ORDER BY  CASE WHEN T.settle_date != DATE_FORMAT(T.settle_regdate,'%Y-%m-%d') THEN DATE_FORMAT(T.settle_date,'%Y-%m-%d %23:%59:%998') ELSE DATE_FORMAT(T.settle_regdate,'%Y-%m-%d %H:%i:%s') END asc 			        ) AS rowNum 		        From   								DY_SETTLE_UPLOAD T 								Left Outer Join DY_ORDER O On T.order_idx = O.order_idx 								Left Outer Join DY_SELLER S On T.seller_idx = S.seller_idx 								Left Outer Join DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = T.supplier_idx  		        where   								T.settle_is_del = N'N' 								 And 	  			( 				settle_date >= '2019-12-02'  				And settle_date <= '2019-12-02' 			)           [[^^]] {"path":"/settle/transaction_list_grid.php","querystring":"param=period_type%3Dsettle_date%26date_start%3D2020-02-12%26date_end%3D2020-02-12%26product_category_l_idx%3D0%26product_category_m_idx%3D%26product_tax_type%3D%26product_seller_group_idx%3D0%26product_supplier_group_idx%3D0%26search_column%3DT.product_name%26search_keyword%3D&_search=false&nd=1581498541260&rows=300&page=1&sidx=search_date&sord=asc","postdata":[],"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
