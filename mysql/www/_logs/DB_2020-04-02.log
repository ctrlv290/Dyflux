2020-04-02 14:54:13 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'SUPPLIER.supplier_is_use' in 'where clause' [[^^]] [] [[^^]] []
2020-04-02 14:54:13 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-04-02' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-04-02', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-04-02', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-04-02' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-04-02', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-04-02' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-04-02', DATE) THEN CAST(ST1.stock_unit_price AS SIGNED INTEGER) * CAST(ST1.stock_amount AS SIGNED INTEGER) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-04-02', DATE) THEN CAST(ST1.stock_unit_price AS SIGNED INTEGER) * CAST(ST1.stock_amount AS SIGNED INTEGER) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-04-02', DATE)                          AND tran_type = N'PURCHASE_PREPAY_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1               and SUPPLIER.supplier_is_use = N'Y'              And SUPPLIER.supplier_use_prepay = N'Y'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","show":"show_all","date":"2020-04-02","mode":"get_purchase_prepay","period_type":"day","tran_type":"PURCHASE_PREPAY_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-04-02 14:54:14 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'SUPPLIER.supplier_is_use' in 'where clause' [[^^]] [] [[^^]] []
2020-04-02 14:54:14 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-04-02' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-04-02', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-04-02', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-04-02' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-04-02', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-04-02' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-04-02', DATE) THEN CAST(ST1.stock_unit_price AS SIGNED INTEGER) * CAST(ST1.stock_amount AS SIGNED INTEGER) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-04-02', DATE) THEN CAST(ST1.stock_unit_price AS SIGNED INTEGER) * CAST(ST1.stock_amount AS SIGNED INTEGER) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-04-02', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1               and SUPPLIER.supplier_is_use = N'Y'              And SUPPLIER.supplier_use_prepay = N'N'  And SUPPLIER.supplier_payment_type = N'DAY'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","show":"show_all","date":"2020-04-02","mode":"get_purchase_credit_type_d","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
2020-04-02 14:54:14 [[^^]] ERROR [[^^]] Error message(1054): Unknown column 'SUPPLIER.supplier_is_use' in 'where clause' [[^^]] [] [[^^]] []
2020-04-02 14:54:14 [[^^]] ERROR [[^^]] execSqlList =>  				WITH CTE_SETTLE AS                 (                     SELECT                         supplier_idx                         , '2020-04-02' AS tran_date                         , IFNULL(SUM(CASE WHEN settle_date < CONVERT('2020-04-02', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS prev_settle_amount                         , IFNULL(SUM(CASE WHEN settle_date = CONVERT('2020-04-02', DATE) THEN settle_purchase_supply + settle_purchase_delivery_in_vat ELSE 0 END), 0) AS today_settle_amount                     FROM DY_SETTLE                     WHERE                         settle_is_del = 'N'                          AND product_sale_type = N'CONSIGNMENT'                     GROUP BY supplier_idx                 )                 , CTE_LEDGER AS                 (                     SELECT                         target_idx                         , '2020-04-02' as tran_date                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as prev_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_tran_amount ELSE 0 END), 0) as today_tran_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as prev_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_adjust_amount ELSE 0 END), 0) as today_adjust_amount                         , IFNULL(SUM(CASE WHEN ledger_date < CONVERT('2020-04-02', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as prev_refund_amount                         , IFNULL(SUM(CASE WHEN ledger_date = CONVERT('2020-04-02', DATE) THEN ledger_refund_amount ELSE 0 END), 0) as today_refund_amount                     FROM DY_LEDGER                     WHERE                          ledger_is_del = N'N'                          And ledger_date <= Convert('2020-04-02', DATE)                         And ledger_type = N'LEDGER_PURCHASE'                     GROUP BY target_idx                 )                 , CTE_STOCK AS                 (                     SELECT                         P.supplier_idx                         , '2020-04-02' AS tran_date                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date < CONVERT('2020-04-02', DATE) THEN CAST(ST1.stock_unit_price AS SIGNED INTEGER) * CAST(ST1.stock_amount AS SIGNED INTEGER) ELSE 0 END), 0) as prev_stock_amount                         , IFNULL(SUM(CASE WHEN stock_is_confirm_date = CONVERT('2020-04-02', DATE) THEN CAST(ST1.stock_unit_price AS SIGNED INTEGER) * CAST(ST1.stock_amount AS SIGNED INTEGER) ELSE 0 END), 0) as today_stock_amount                     FROM DY_STOCK AS ST1                         JOIN DY_PRODUCT AS P ON P.product_idx = ST1.product_idx                     WHERE                         ST1.stock_kind = N'STOCK_ORDER'                          AND ST1.stock_is_confirm = N'Y'                          AND ST1.stock_is_cancel = N'N'                          AND ST1.stock_is_del = N'N'                          AND ST1.stock_status != N'SHORTAGE'                     GROUP BY P.supplier_idx                 )                 , CTE_TRAN AS                 (                     SELECT                         target_idx as target_idx2                         , tran_memo                         , tran_date                     FROM DY_TRANSACTION_STATE                     WHERE                          tran_is_del = N'N'                          AND tran_date = CONVERT('2020-04-02', DATE)                          AND tran_type = N'PURCHASE_CREDIT_IN_AMOUNT'                 ) 			 		    Select                 CASE                     WHEN sup_idx_le IS NOT NULL THEN sup_idx_le                     WHEN sup_idx_se IS NOT NULL THEN sup_idx_se                     ELSE sup_idx_st                 END AS customer_idx                 , CASE                     WHEN tran_date_le IS NOT NULL THEN tran_date_le                     WHEN tran_date_se IS NOT NULL THEN tran_date_se                     ELSE tran_date_st                 END AS tran_date                 , IFNULL(prev_settle_amount, 0) + IFNULL(prev_stock_amount, 0) + IFNULL(prev_adjust_amount, 0) + IFNULL(prev_refund_amount, 0) AS prev_settle_amount                 , IFNULL(today_settle_amount, 0) + IFNULL(today_stock_amount, 0) + IFNULL(today_adjust_amount, 0) + IFNULL(today_refund_amount, 0) AS today_settle_amount                 , IFNULL(prev_tran_amount, 0) as prev_tran_amount                 , IFNULL(today_tran_amount, 0) as today_tran_amount                 , SUPPLIER.supplier_name as customer_name                 , SUPPLIER.supplier_use_prepay                 , IFNULL(TR.tran_memo, '') as today_tran_memo             From             (                 SELECT                      LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_LEDGER LE                      LEFT JOIN CTE_SETTLE SE ON LE.target_idx = SE.supplier_idx                     LEFT JOIN CTE_STOCK ST ON LE.target_idx = ST.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_SETTLE SE                     LEFT JOIN CTE_LEDGER LE ON SE.supplier_idx = LE.target_idx                     LEFT JOIN CTE_STOCK ST ON ST.supplier_idx = SE.supplier_idx                 UNION                 SELECT                     LE.target_idx AS sup_idx_le, LE.tran_date AS tran_date_le, LE.prev_tran_amount, LE.today_tran_amount, LE.prev_adjust_amount, LE.today_adjust_amount, LE.prev_refund_amount, LE.today_refund_amount,                     SE.supplier_idx AS sup_idx_se, SE.tran_date AS tran_date_se, SE.prev_settle_amount, SE.today_settle_amount,                     ST.supplier_idx AS sup_idx_st, ST.tran_date AS tran_date_st, ST.prev_stock_amount, ST.today_stock_amount                 FROM CTE_STOCK ST                     LEFT JOIN CTE_LEDGER LE ON ST.supplier_idx = LE.target_idx                     LEFT JOIN CTE_SETTLE SE ON ST.supplier_idx = SE.supplier_idx             ) CTE                 LEFT OUTER JOIN CTE_TRAN TR	ON (TR.target_idx2 = sup_idx_le AND TR.tran_date = tran_date_le) OR (TR.target_idx2 = sup_idx_se AND TR.tran_date = tran_date_se) OR (TR.target_idx2 = sup_idx_st AND TR.tran_date = tran_date_st)                 LEFT OUTER JOIN DY_MEMBER_SUPPLIER SUPPLIER On SUPPLIER.member_idx = sup_idx_le OR SUPPLIER.member_idx = sup_idx_se OR SUPPLIER.member_idx = sup_idx_st             WHERE 1 = 1               and SUPPLIER.supplier_is_use = N'Y'              And SUPPLIER.supplier_use_prepay = N'N'  And SUPPLIER.supplier_payment_type = N'MONTH'              Order by SUPPLIER.supplier_name ASC 		 [[^^]] {"path":"/settle/transaction_state_proc_ajax.php","querystring":null,"postdata":{"period":"day","show":"show_all","date":"2020-04-02","mode":"get_purchase_credit_type_m","period_type":"day","tran_type":"PURCHASE_CREDIT_IN_AMOUNT"},"SQLSTATE":[],"CODE":[],"MESSAGE":[]} [[^^]] []
